(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(95)),o={id:"introduction",title:"Getting Started",slug:"/"},c={unversionedId:"introduction",id:"introduction",isDocsHomePage:!1,title:"Getting Started",description:"Pathom is a Clojure/script library to model attribute relationships.",source:"@site/docs/introduction.mdx",slug:"/",permalink:"/docs/",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/introduction.mdx",version:"current",sidebar:"docs",next:{title:"Pathom Tutorial - IP Weather",permalink:"/docs/tutorial"}},s=[{value:"General attribute modeling view",id:"general-attribute-modeling-view",children:[]},{value:"Core Concepts",id:"core-concepts",children:[{value:"Resolver",id:"resolver",children:[]},{value:"Environment",id:"environment",children:[]},{value:"Planner",id:"planner",children:[]},{value:"Runner",id:"runner",children:[]},{value:"Interface",id:"interface",children:[]}]},{value:"Install",id:"install",children:[]},{value:"Namespace aliases",id:"namespace-aliases",children:[]}],l={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Pathom")," is a Clojure/script library to model attribute relationships."),Object(i.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"danger")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Pathom 3 uses a new and different algorithm to process information, different from\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://wilkerlucio.github.io/pathom/v2/"}),"Pathom 2"),", that has been tested in many\nproduction apps, the algorithm of Pathom 3 is still under experimentation stage, so\nconsider that if you intend to use Pathom in production code."))),Object(i.b)("h2",{id:"general-attribute-modeling-view"},"General attribute modeling view"),Object(i.b)("p",null,"Attribute modeling is a way to think and design information systems."),Object(i.b)("p",null,"Consider the question: What's the temperature in the city of Recife now?"),Object(i.b)("p",null,"Using my attribute modeler hat, I can break this description into two attributes and one\nvalue. The demand is for a ",Object(i.b)("inlineCode",{parentName:"p"},":temperature"),", and the available information is the\n",Object(i.b)("inlineCode",{parentName:"p"},":city")," with the value of ",Object(i.b)("inlineCode",{parentName:"p"},"Recife"),". Or we can express it as a Clojure map:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'{:city        "Recife"\n :temperature ?}\n')),Object(i.b)("p",null,"Note we left ",Object(i.b)("inlineCode",{parentName:"p"},"?")," for the unknown attributes. In a way, this map expresses the same thing\nas the question we had before."),Object(i.b)("p",null,"Now, to realize the ",Object(i.b)("inlineCode",{parentName:"p"},":temperature")," from the ",Object(i.b)("inlineCode",{parentName:"p"},"city"),", we write a resolver\nestablishing this relationship."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'; our mock temperatures database\n(def temperatures\n  {"Recife" 23})\n\n(pco/defresolver temperature-from-city [{:keys [city]}]\n  {:temperature (get temperatures city)})\n')),Object(i.b)("p",null,"A resolver looks like a function but with some constraints:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The resolver input ",Object(i.b)("strong",{parentName:"li"},"must")," be a map, so the input information is labeled."),Object(i.b)("li",{parentName:"ol"},"A resolver ",Object(i.b)("strong",{parentName:"li"},"must")," return a map, so the output information is labeled."),Object(i.b)("li",{parentName:"ol"},"A resolver may also receive another map, containing the environment information.")),Object(i.b)("p",null,"The next step is to create the indexes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(def indexes\n  (pci/register [temperature-from-city]))\n")),Object(i.b)("p",null,"Pathom uses the indexes to traverse the attribute relationships."),Object(i.b)("p",null,"Now to make the original question to Pathom, we are going to use the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/smart-maps"}),"Smart Map")," interface:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'; this creates a smart map, using our indexes, and with some initial data\n(def smart-map (psm/smart-map indexes {:city "Recife"}))\n\n; smart maps work as regular maps when looking for the initial data\n(:city smart-map); => "Recife"\n\n; but the difference comes when we ask for keys not present in the map, but reachable\n; via resolvers\n(:temperature smart-map); => 23\n')),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Note that in this example, we only mention the indexes and the attributes, the resolver\nnames get abstracted from the user and left for Pathom to figure when to call then."))),Object(i.b)("p",null,"Now consider a slightly different question: Is it cold in ",Object(i.b)("inlineCode",{parentName:"p"},"Recife")," now?"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'{:city  "Recife"\n :cold? ?}\n')),Object(i.b)("p",null,"To compute the ",Object(i.b)("inlineCode",{parentName:"p"},":cold?")," attribute, we can write a resolver that depends on the ",Object(i.b)("inlineCode",{parentName:"p"},":temperature"),"\nattribute:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(pco/defresolver cold? [{:keys [temperature]}]\n  {:cold? (< temperature 20)})\n")),Object(i.b)("p",null,"Update the indexes definition to also include the ",Object(i.b)("inlineCode",{parentName:"p"},"cold?")," resolver:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"(def indexes\n  (pci/register [temperature-from-city cold?]))\n")),Object(i.b)("p",null,"Now, back to the question: Is it cold in ",Object(i.b)("inlineCode",{parentName:"p"},"Recife")," now? This time we will use a different\ninterface, the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/eql"}),"EQL")," interface."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'; this time we will use the EQL interface to trigger the Pathom engine\n(p.eql/process\n  indexes\n  {:city "Recife"}\n  [:cold?])\n; => {:cold? false}\n')),Object(i.b)("p",null,'Note that our "lookup code" remains the same size, although we have to run more operations\nnow. This ability to abstract the function call chain is the primary utility you should\nlook for in Pathom.'),Object(i.b)("p",null,"In this getting started, we talked a bit about attribute modeling, how to write a few\nresolvers and how to trigger the Pathom engine to fulfill attribute questions."),Object(i.b)("p",null,"You can find a complete tutorial playing with weather API's at the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tutorial"}),"Pathom Tutorial"),"\npage."),Object(i.b)("h2",{id:"core-concepts"},"Core Concepts"),Object(i.b)("p",null,"Here is a list of the main concepts in Pathom that can help you navigate the\ndocumentation."),Object(i.b)("h3",{id:"resolver"},"Resolver"),Object(i.b)("p",null,"Resolvers are building blocks that establish relationships between attributes. Pathom\nsecret sauce is the ability to traverse a graph of attribute relationships, defined by\nresolvers, given some user request."),Object(i.b)("h3",{id:"environment"},"Environment"),Object(i.b)("p",null,"Is a map containing all the necessary context required to process a request. Data for\nPathom internals uses Pathom-specific namespaced keys, and you will typically add your\nown entries (database connections, etc.) such that all these data are available to your\nresolvers."),Object(i.b)("h3",{id:"planner"},"Planner"),Object(i.b)("p",null,"Given the environment, some initial data and a request, the planner is responsible for\nfiguring what resolvers to call, in what order."),Object(i.b)("h3",{id:"runner"},"Runner"),Object(i.b)("p",null,"Once the plan is ready the runner executes the plan, by traversing and executing resolvers,\nthen responses are coming as expected and chooses the path when multiple options\nshaping the results to satisfy the request. It handles errors as well as potential conflicts\nare available.(e.g. multiple resolvers can handle a given request)."),Object(i.b)("h3",{id:"interface"},"Interface"),Object(i.b)("p",null,"To bundle the process together, you interact using one of the Pathom interfaces:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/smart-maps"}),"Smart Maps")," is a custom map data structure, similar to a ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://docs.datomic.com/on-prem/entities.html"}),"Datomic Entity"),", but instead\nof loading from a database, realized using resolvers."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/eql"}),"EQL")," is a syntax that allows users to express a data shape, and then Pathom\nfill the requirements using the logic from resolvers.")),Object(i.b)("h2",{id:"install"},"Install"),Object(i.b)("p",null,"While in alpha state, this library is only available as a git ",Object(i.b)("inlineCode",{parentName:"p"},"deps")," dependency."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),'{:deps\n {com.wsscode/pathom3 {:git/url "https://github.com/wilkerlucio/pathom3"\n                       :sha     "FIND_LATEST_ON_GITHUB"}}}\n')),Object(i.b)("h2",{id:"namespace-aliases"},"Namespace aliases"),Object(i.b)("p",null,"When you read code from the examples in this documentation they will use alias to reference\nnamespaces, here you can find what the aliases point to:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-clojure"}),"[com.wsscode.pathom3.cache :as p.cache]\n[com.wsscode.pathom3.connect.built-in.resolvers :as pbir]\n[com.wsscode.pathom3.connect.indexes :as pci]\n[com.wsscode.pathom3.connect.operation :as pco]\n[com.wsscode.pathom3.connect.planner :as pcp]\n[com.wsscode.pathom3.connect.runner :as pcr]\n[com.wsscode.pathom3.format.eql :as pf.eql]\n[com.wsscode.pathom3.interface.eql :as p.eql]\n[com.wsscode.pathom3.interface.smart-map :as psm]\n[com.wsscode.pathom3.path :as p.path]\n[com.wsscode.pathom3.plugin :as p.plugin]\n")))}p.isMDXComponent=!0},95:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||i;return a?r.a.createElement(d,c(c({ref:t},l),{},{components:a})):r.a.createElement(d,c({ref:t},l))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);