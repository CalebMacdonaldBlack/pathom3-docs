(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return d}));var o=t(2),a=t(6),c=(t(0),t(87)),r={id:"eql",title:"EQL"},s={unversionedId:"eql",id:"eql",isDocsHomePage:!1,title:"EQL",description:"Using the EQL interface, you can request Pathom to fetch a specific shape of data.",source:"@site/docs/eql.mdx",slug:"/eql",permalink:"/docs/eql",editUrl:"https://github.com/wilkerlucio/pathom3-docs/edit/master/docs/eql.mdx",version:"current",sidebar:"docs",previous:{title:"Smart Maps",permalink:"/docs/smart-maps"},next:{title:"Environment",permalink:"/docs/environment"}},i=[{value:"Using EQL interface",id:"using-eql-interface",children:[{value:"Nested entities",id:"nested-entities",children:[]},{value:"Providing map data",id:"providing-map-data",children:[]},{value:"Providing data via EQL idents",id:"providing-data-via-eql-idents",children:[]}]},{value:"Fetching run status",id:"fetching-run-status",children:[]}],p={rightToc:i};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Using the EQL interface, you can request Pathom to fetch a specific shape of data."),Object(c.b)("p",null,"If you are not familiar with EQL, check ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"https://edn-query-language.org"}),"https://edn-query-language.org")," for an overview of the syntax."),Object(c.b)("p",null,"The goal of using EQL is to express some data shape (hierarchy) without the values and\nlet Pathom fill in the values."),Object(c.b)("p",null,"Using EQL is also the most efficient way to request multiple things at once with Pathom.\nWith EQL, Pathom knows the full request ahead of time. Therefore, Pathom can use this information\nto optimize the planning and execution."),Object(c.b)("h2",{id:"using-eql-interface"},"Using EQL interface"),Object(c.b)("p",null,"Keep in mind that EQL is about expressing some data hierarchy, to start simple we will\nuse a flat structure to demonstrate the basic usage of the EQL interface:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-clojure"}),"(ns com.wsscode.pathom.docs.eql-demos\n  (:require [com.wsscode.pathom3.connect.built-in.resolvers :as pbir]\n            [com.wsscode.pathom3.connect.indexes :as pci]\n            [com.wsscode.pathom3.interface.eql :as p.eql]))\n\n(def indexes\n  (pci/register\n    [(pbir/constantly-resolver ::pi 3.1415)\n     (pbir/single-attr-resolver ::pi ::tau #(* % 2))]))\n\n(p.eql/process indexes [::pi ::tau])\n; => {::pi 3.1415 ::tau 6.283}\n")),Object(c.b)("h3",{id:"nested-entities"},"Nested entities"),Object(c.b)("p",null,"Using ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"https://edn-query-language.org/eql/1.0.0/specification.html#_joins"}),"EQL joins")," you\ncan make specific requirements about nested data. In this example we will simulate the\nexistence of many worlds where PI have different values:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-clojure"}),"(def indexes\n  (pci/register\n    [(pbir/constantly-resolver ::pi 3.1415)\n     (pbir/single-attr-resolver ::pi ::tau #(* % 2))\n     ; define a resolver to provide a collection of items\n     (pbir/constantly-resolver ::pi-worlds\n       [{::pi 3.14}\n        {::pi 3.14159}\n        {::pi 6.8}\n        {::tau 20}\n        {::pi 10 ::tau 50}])]))\n\n(p.eql/process indexes\n  ; using a map we are able to specify nested requirements from some attribute\n  [{::pi-worlds [::tau ::pi]}])\n; => {::pi-worlds\n;      [{::tau 6.28\n;        ::pi  3.14}\n;       {::tau 6.28318\n;        ::pi  3.14159}\n;       {::tau 13.6\n;        ::pi  6.8}\n;       {::tau 20\n;        ::pi  3.1415}\n;       {::tau 50\n;        ::pi  10}]}\n")),Object(c.b)("h3",{id:"providing-map-data"},"Providing map data"),Object(c.b)("p",null,"You can provide initial data to the EQL process using the following syntax:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-clojure"}),"(p.eql/process indexes {::pi 2.3} [::tau])\n; => {::tau 4.6}\n")),Object(c.b)("h3",{id:"providing-data-via-eql-idents"},"Providing data via EQL idents"),Object(c.b)("p",null,"Pathom uses the EQL ",Object(c.b)("inlineCode",{parentName:"p"},"ident")," as a form to specify a single attribute to start requesting\ndata from. Here is an example using the revolvers we created before:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-clojure"}),"(p.eql/process indexes [{[::pi 2.3] [::tau]}])\n; => {[::pi 2.3] {::tau 4.6}}\n")),Object(c.b)("p",null,"In this example, given ",Object(c.b)("inlineCode",{parentName:"p"},"PI")," is ",Object(c.b)("inlineCode",{parentName:"p"},"2.3"),", ",Object(c.b)("inlineCode",{parentName:"p"},"Tau")," becomes ",Object(c.b)("inlineCode",{parentName:"p"},"4.6"),", since it's defined as the\ndouble of PI."),Object(c.b)("h2",{id:"fetching-run-status"},"Fetching run status"),Object(c.b)("p",null,"To debug a EQL process, add the attribute ",Object(c.b)("inlineCode",{parentName:"p"},":com.wsscode.pathom3.connect.runner/run-stats"),"\nto the query:"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-clojure"}),"(p.eql/process indexes [::tau :com.wsscode.pathom3.connect.runner/run-stats])\n;{:com.wsscode.pathom.docs.eql-demos/tau\n; 6.283\n;\n; :com.wsscode.pathom3.connect.runner/run-stats\n; {:com.wsscode.pathom3.connect.planner/index-attrs                           #:com.wsscode.pathom.docs.eql-demos{:tau 1,\n;                                                                                                                 :pi  2},\n;  :com.wsscode.pathom3.connect.planner/unreachable-attrs                     #{:com.wsscode.pathom3.connect.runner/run-stats},\n;  :com.wsscode.pathom3.connect.runner/graph-process-duration-ms              0.10610496997833252,\n;  :com.wsscode.pathom3.connect.runner.stats/overhead-duration-ms             0.09002596139907837,\n;  :com.wsscode.pathom3.connect.planner/root                                  2,\n;  :com.wsscode.pathom3.connect.runner.stats/overhead-duration-percentage     0.8484613059827677,\n;  :com.wsscode.pathom3.connect.runner/node-run-stats                         {1 #:com.wsscode.pathom3.connect.runner{:run-duration-ms 0.00959700345993042,\n;                                                                                                                     :node-run-input  #:com.wsscode.pathom.docs.eql-demos{:pi 3.1415}},\n;                                                                              2 #:com.wsscode.pathom3.connect.runner{:run-duration-ms 0.0064820051193237305,\n;                                                                                                                     :node-run-input  {}}},\n;  :com.wsscode.pathom3.connect.planner/index-ast                             {:com.wsscode.pathom3.connect.runner/run-stats {:key          :com.wsscode.pathom3.connect.runner/run-stats,\n;                                                                                                                             :type         :prop,\n;                                                                                                                             :dispatch-key :com.wsscode.pathom3.connect.runner/run-stats},\n;                                                                              :com.wsscode.pathom.docs.eql-demos/tau        {:key          :com.wsscode.pathom.docs.eql-demos/tau,\n;                                                                                                                             :type         :prop,\n;                                                                                                                             :dispatch-key :com.wsscode.pathom.docs.eql-demos/tau}},\n;  :com.wsscode.pathom3.connect.planner/unreachable-resolvers                 #{},\n;  :com.wsscode.pathom3.connect.planner/index-resolver->nodes                 {com.wsscode.pathom.docs.eql_demos_SLASH_pi-constant                                                           #{2},\n;                                                                              com.wsscode.pathom.docs.eql_demos_SLASH_pi->com.wsscode.pathom.docs.eql_demos_SLASH_tau-single-attr-transform #{1}},\n;  :com.wsscode.pathom3.connect.planner/nodes                                 {1 {:com.wsscode.pathom3.connect.planner/after-nodes      #{2},\n;                                                                                 :com.wsscode.pathom3.connect.planner/requires         #:com.wsscode.pathom.docs.eql-demos{:tau {}},\n;                                                                                 :com.wsscode.pathom3.connect.operation/op-name        com.wsscode.pathom.docs.eql_demos_SLASH_pi->com.wsscode.pathom.docs.eql_demos_SLASH_tau-single-attr-transform,\n;                                                                                 :com.wsscode.pathom3.connect.planner/source-for-attrs #{:com.wsscode.pathom.docs.eql-demos/tau},\n;                                                                                 :com.wsscode.pathom3.connect.planner/input            #:com.wsscode.pathom.docs.eql-demos{:pi {}},\n;                                                                                 :com.wsscode.pathom3.connect.planner/node-id          1},\n;                                                                              2 {:com.wsscode.pathom3.connect.planner/requires         #:com.wsscode.pathom.docs.eql-demos{:pi {}},\n;                                                                                 :com.wsscode.pathom3.connect.operation/op-name        com.wsscode.pathom.docs.eql_demos_SLASH_pi-constant,\n;                                                                                 :com.wsscode.pathom3.connect.planner/source-for-attrs #{:com.wsscode.pathom.docs.eql-demos/pi},\n;                                                                                 :com.wsscode.pathom3.connect.planner/input            {},\n;                                                                                 :com.wsscode.pathom3.connect.planner/run-next         1,\n;                                                                                 :com.wsscode.pathom3.connect.planner/node-id          2}},\n;  :com.wsscode.pathom3.connect.runner.stats/resolver-accumulated-duration-ms 0.01607900857925415}}\n")),Object(c.b)("p",null,"For more details on what is the ",Object(c.b)("inlineCode",{parentName:"p"},"run-stats")," check at the ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/runner#run-stats"}),"runner page"),"."))}d.isMDXComponent=!0},87:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return h}));var o=t(0),a=t.n(o);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),d=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=d(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(t),u=o,h=m["".concat(r,".").concat(u)]||m[u]||l[u]||c;return t?a.a.createElement(h,s(s({ref:n},p),{},{components:t})):a.a.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,r=new Array(c);r[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<c;p++)r[p]=t[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);